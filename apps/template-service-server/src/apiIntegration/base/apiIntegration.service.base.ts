/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ApiIntegration as PrismaApiIntegration,
  User as PrismaUser,
} from "@prisma/client";

export class ApiIntegrationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApiIntegrationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.apiIntegration.count(args);
  }

  async apiIntegrations<T extends Prisma.ApiIntegrationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApiIntegrationFindManyArgs>
  ): Promise<PrismaApiIntegration[]> {
    return this.prisma.apiIntegration.findMany<Prisma.ApiIntegrationFindManyArgs>(
      args
    );
  }
  async apiIntegration<T extends Prisma.ApiIntegrationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApiIntegrationFindUniqueArgs>
  ): Promise<PrismaApiIntegration | null> {
    return this.prisma.apiIntegration.findUnique(args);
  }
  async createApiIntegration<T extends Prisma.ApiIntegrationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApiIntegrationCreateArgs>
  ): Promise<PrismaApiIntegration> {
    return this.prisma.apiIntegration.create<T>(args);
  }
  async updateApiIntegration<T extends Prisma.ApiIntegrationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApiIntegrationUpdateArgs>
  ): Promise<PrismaApiIntegration> {
    return this.prisma.apiIntegration.update<T>(args);
  }
  async deleteApiIntegration<T extends Prisma.ApiIntegrationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApiIntegrationDeleteArgs>
  ): Promise<PrismaApiIntegration> {
    return this.prisma.apiIntegration.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.apiIntegration
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
